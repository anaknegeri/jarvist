// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class Camera {
    "ID": number;
    "uuid": string;
    "Name": string;
    "LocationID": string;
    "Description": string;
    "Tags": string;
    "Schema": string;
    "Host": string;
    "Port": number;
    "Path": string;
    "Username": string;
    "Password": string;
    "ImageData": string;
    "Direction": string;
    "Status": string;
    "Payload": string;
    "created_at": string;
    "deleted_at"?: string | null;
    "is_connected"?: boolean | null;
    "last_checked"?: string | null;
    "status_message"?: string | null;
    "Location": Location;

    /** Creates a new Camera instance. */
    constructor($$source: Partial<Camera> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("uuid" in $$source)) {
            this["uuid"] = "";
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("LocationID" in $$source)) {
            this["LocationID"] = "";
        }
        if (!("Description" in $$source)) {
            this["Description"] = "";
        }
        if (!("Tags" in $$source)) {
            this["Tags"] = "";
        }
        if (!("Schema" in $$source)) {
            this["Schema"] = "";
        }
        if (!("Host" in $$source)) {
            this["Host"] = "";
        }
        if (!("Port" in $$source)) {
            this["Port"] = 0;
        }
        if (!("Path" in $$source)) {
            this["Path"] = "";
        }
        if (!("Username" in $$source)) {
            this["Username"] = "";
        }
        if (!("Password" in $$source)) {
            this["Password"] = "";
        }
        if (!("ImageData" in $$source)) {
            this["ImageData"] = "";
        }
        if (!("Direction" in $$source)) {
            this["Direction"] = "";
        }
        if (!("Status" in $$source)) {
            this["Status"] = "";
        }
        if (!("Payload" in $$source)) {
            this["Payload"] = "";
        }
        if (!("created_at" in $$source)) {
            this["created_at"] = "";
        }
        if (!("Location" in $$source)) {
            this["Location"] = (new Location());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Camera instance from a string or object.
     */
    static createFrom($$source: any = {}): Camera {
        const $$createField21_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Location" in $$parsedSource) {
            $$parsedSource["Location"] = $$createField21_0($$parsedSource["Location"]);
        }
        return new Camera($$parsedSource as Partial<Camera>);
    }
}

export class CameraInput {
    "name": string;
    "location": string;
    "schema": string;
    "host": string;
    "port": number;
    "path": string;
    "username": string;
    "password": string;
    "image_data": string;
    "direction": string;
    "description": string;
    "tags": string;
    "lines": LineData[];

    /** Creates a new CameraInput instance. */
    constructor($$source: Partial<CameraInput> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("location" in $$source)) {
            this["location"] = "";
        }
        if (!("schema" in $$source)) {
            this["schema"] = "";
        }
        if (!("host" in $$source)) {
            this["host"] = "";
        }
        if (!("port" in $$source)) {
            this["port"] = 0;
        }
        if (!("path" in $$source)) {
            this["path"] = "";
        }
        if (!("username" in $$source)) {
            this["username"] = "";
        }
        if (!("password" in $$source)) {
            this["password"] = "";
        }
        if (!("image_data" in $$source)) {
            this["image_data"] = "";
        }
        if (!("direction" in $$source)) {
            this["direction"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("tags" in $$source)) {
            this["tags"] = "";
        }
        if (!("lines" in $$source)) {
            this["lines"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CameraInput instance from a string or object.
     */
    static createFrom($$source: any = {}): CameraInput {
        const $$createField12_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("lines" in $$parsedSource) {
            $$parsedSource["lines"] = $$createField12_0($$parsedSource["lines"]);
        }
        return new CameraInput($$parsedSource as Partial<CameraInput>);
    }
}

export class CoordLocation {
    "x": number;
    "y": number;

    /** Creates a new CoordLocation instance. */
    constructor($$source: Partial<CoordLocation> = {}) {
        if (!("x" in $$source)) {
            this["x"] = 0;
        }
        if (!("y" in $$source)) {
            this["y"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CoordLocation instance from a string or object.
     */
    static createFrom($$source: any = {}): CoordLocation {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CoordLocation($$parsedSource as Partial<CoordLocation>);
    }
}

export class LineData {
    "start": CoordLocation;
    "end": CoordLocation;
    "direction": string;
    "color": string;

    /** Creates a new LineData instance. */
    constructor($$source: Partial<LineData> = {}) {
        if (!("start" in $$source)) {
            this["start"] = (new CoordLocation());
        }
        if (!("end" in $$source)) {
            this["end"] = (new CoordLocation());
        }
        if (!("direction" in $$source)) {
            this["direction"] = "";
        }
        if (!("color" in $$source)) {
            this["color"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LineData instance from a string or object.
     */
    static createFrom($$source: any = {}): LineData {
        const $$createField0_0 = $$createType3;
        const $$createField1_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("start" in $$parsedSource) {
            $$parsedSource["start"] = $$createField0_0($$parsedSource["start"]);
        }
        if ("end" in $$parsedSource) {
            $$parsedSource["end"] = $$createField1_0($$parsedSource["end"]);
        }
        return new LineData($$parsedSource as Partial<LineData>);
    }
}

export class Location {
    "id": string;
    "name": string;
    "description": string;
    "created_at": string;
    "deleted_at"?: string | null;

    /** Creates a new Location instance. */
    constructor($$source: Partial<Location> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("created_at" in $$source)) {
            this["created_at"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Location instance from a string or object.
     */
    static createFrom($$source: any = {}): Location {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Location($$parsedSource as Partial<Location>);
    }
}

export class LocationInput {
    "name": string;
    "description": string;

    /** Creates a new LocationInput instance. */
    constructor($$source: Partial<LocationInput> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LocationInput instance from a string or object.
     */
    static createFrom($$source: any = {}): LocationInput {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new LocationInput($$parsedSource as Partial<LocationInput>);
    }
}

export class SettingInput {
    "site_code": string;
    "site_name": string;
    "site_category": number;
    "default_timezone": string;

    /** Creates a new SettingInput instance. */
    constructor($$source: Partial<SettingInput> = {}) {
        if (!("site_code" in $$source)) {
            this["site_code"] = "";
        }
        if (!("site_name" in $$source)) {
            this["site_name"] = "";
        }
        if (!("site_category" in $$source)) {
            this["site_category"] = 0;
        }
        if (!("default_timezone" in $$source)) {
            this["default_timezone"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SettingInput instance from a string or object.
     */
    static createFrom($$source: any = {}): SettingInput {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new SettingInput($$parsedSource as Partial<SettingInput>);
    }
}

export class TimeZone {
    "ID": number;
    "Zone": string;
    "UTCOffset": string;
    "Name": string;

    /** Creates a new TimeZone instance. */
    constructor($$source: Partial<TimeZone> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = 0;
        }
        if (!("Zone" in $$source)) {
            this["Zone"] = "";
        }
        if (!("UTCOffset" in $$source)) {
            this["UTCOffset"] = "";
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TimeZone instance from a string or object.
     */
    static createFrom($$source: any = {}): TimeZone {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TimeZone($$parsedSource as Partial<TimeZone>);
    }
}

// Private type creation functions
const $$createType0 = Location.createFrom;
const $$createType1 = LineData.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = CoordLocation.createFrom;
