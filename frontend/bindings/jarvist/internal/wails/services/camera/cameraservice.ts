// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../../../../github.com/wailsapp/wails/v3/pkg/application/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ffmpeg$0 from "../../../common/ffmpeg/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as models$0 from "../../../common/models/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../time/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function CheckCameraConnectionNow(id: number): $CancellablePromise<$models.CameraConnectionStatus> {
    return $Call.ByID(918698387, id).then(($result: any) => {
        return $$createType0($result);
    });
}

export function CheckConnection(rtspURL: string, takeScreenshot: boolean): $CancellablePromise<string> {
    return $Call.ByID(2001231066, rtspURL, takeScreenshot);
}

export function CheckConnectionWithConfig(config: ffmpeg$0.RTSPConfig, takeScreenshot: boolean): $CancellablePromise<string> {
    return $Call.ByID(4050511744, config, takeScreenshot);
}

export function CleanupOldConnectionStatuses(): $CancellablePromise<void> {
    return $Call.ByID(4021201905);
}

export function CreateCamera(input: models$0.CameraInput): $CancellablePromise<models$0.Camera | null> {
    return $Call.ByID(909368473, input).then(($result: any) => {
        return $$createType2($result);
    });
}

export function DeleteCamera(id: number): $CancellablePromise<void> {
    return $Call.ByID(2586735986, id);
}

export function ExportCameraConfig(): $CancellablePromise<void> {
    return $Call.ByID(4290686033);
}

export function GenerateRTSPURL(config: ffmpeg$0.RTSPConfig): $CancellablePromise<string> {
    return $Call.ByID(2092294413, config);
}

export function GetAllConnectionStatuses(): $CancellablePromise<{ [_: string]: $models.CameraConnectionStatus }> {
    return $Call.ByID(3873530383).then(($result: any) => {
        return $$createType3($result);
    });
}

export function GetCameraByID(id: number): $CancellablePromise<models$0.Camera | null> {
    return $Call.ByID(3465354597, id).then(($result: any) => {
        return $$createType2($result);
    });
}

export function GetCameraWithLines(id: number): $CancellablePromise<[models$0.Camera | null, models$0.LineData[]]> {
    return $Call.ByID(3515562260, id).then(($result: any) => {
        $result[0] = $$createType2($result[0]);
        $result[1] = $$createType5($result[1]);
        return $result;
    });
}

export function GetCamerasWithStatus(): $CancellablePromise<{ [_: string]: any }[]> {
    return $Call.ByID(36480244).then(($result: any) => {
        return $$createType7($result);
    });
}

export function GetConnectionStatus(cameraUUID: string): $CancellablePromise<[$models.CameraConnectionStatus, boolean]> {
    return $Call.ByID(4082151552, cameraUUID).then(($result: any) => {
        $result[0] = $$createType0($result[0]);
        return $result;
    });
}

export function GetImageAsBase64(imagePath: string): $CancellablePromise<string> {
    return $Call.ByID(3446098572, imagePath);
}

export function GetPayloadData(camera: models$0.Camera | null): $CancellablePromise<{ [_: string]: any }> {
    return $Call.ByID(2762386312, camera).then(($result: any) => {
        return $$createType6($result);
    });
}

export function InitService(app: application$0.App | null): $CancellablePromise<void> {
    return $Call.ByID(1253766087, app);
}

export function ListCamera(): $CancellablePromise<models$0.Camera[]> {
    return $Call.ByID(3724680169).then(($result: any) => {
        return $$createType8($result);
    });
}

export function SetCheckInterval(interval: time$0.Duration): $CancellablePromise<void> {
    return $Call.ByID(2526515459, interval);
}

export function StartBackgroundChecking(): $CancellablePromise<void> {
    return $Call.ByID(3666714554);
}

export function StopBackgroundChecking(): $CancellablePromise<void> {
    return $Call.ByID(3319589426);
}

export function UpdateCamera(id: number, input: models$0.CameraInput): $CancellablePromise<models$0.Camera | null> {
    return $Call.ByID(1259675864, id, input).then(($result: any) => {
        return $$createType2($result);
    });
}

// Private type creation functions
const $$createType0 = $models.CameraConnectionStatus.createFrom;
const $$createType1 = models$0.Camera.createFrom;
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = $Create.Map($Create.Any, $$createType0);
const $$createType4 = models$0.LineData.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $Create.Map($Create.Any, $Create.Any);
const $$createType7 = $Create.Array($$createType6);
const $$createType8 = $Create.Array($$createType1);
