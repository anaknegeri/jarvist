// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../../../../github.com/wailsapp/wails/v3/pkg/application/models.js";

/**
 * DeactivateLicense deactivates the current license
 */
export function DeactivateLicense(): $CancellablePromise<{ [_: string]: any }> {
    return $Call.ByID(1476648317).then(($result: any) => {
        return $$createType0($result);
    });
}

/**
 * GetHardwareFingerprint returns a unique identifier for the current machine
 */
export function GetHardwareFingerprint(): $CancellablePromise<string> {
    return $Call.ByID(1335984468);
}

/**
 * GetLicenseDetails returns full license details (safe for settings UI)
 */
export function GetLicenseDetails(): $CancellablePromise<{ [_: string]: any }> {
    return $Call.ByID(2455662267).then(($result: any) => {
        return $$createType0($result);
    });
}

/**
 * GetLicenseStatus returns current license status
 */
export function GetLicenseStatus(): $CancellablePromise<{ [_: string]: any }> {
    return $Call.ByID(2887438893).then(($result: any) => {
        return $$createType0($result);
    });
}

/**
 * HasFeature checks if current license includes a specific feature
 */
export function HasFeature(featureName: string): $CancellablePromise<boolean> {
    return $Call.ByID(2147622010, featureName);
}

/**
 * IsLicensed returns true if the application has a valid license
 */
export function IsLicensed(): $CancellablePromise<boolean> {
    return $Call.ByID(1374073745);
}

/**
 * loadLicense loads and validates license from disk
 */
export function LoadLicense(): $CancellablePromise<void> {
    return $Call.ByID(4217096627);
}

/**
 * ServiceStartup initializes the license service
 */
export function OnStartup(options: application$0.ServiceOptions): $CancellablePromise<void> {
    return $Call.ByID(2036725082, options);
}

/**
 * RegisterLicense activates a license with the given key for this machine
 */
export function RegisterLicense(licenseKey: string): $CancellablePromise<{ [_: string]: any }> {
    return $Call.ByID(2342844612, licenseKey).then(($result: any) => {
        return $$createType0($result);
    });
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
